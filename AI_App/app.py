# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XiGPqVd7gMWU4TlMO-tdkPqnj8oPBH5n
"""

from flask import Flask, render_template, flash, request, url_for, redirect, session
import numpy as np
import pandas as pd
import re
import os
#from . import configuration as cfg
import tensorflow as tf
from tensorflow import keras
import tensorflow.compat.v1 as tf
from numpy import array
from tensorflow.python.keras import backend as k
from tensorflow.python.keras.backend import set_session
from keras.datasets import imdb
from tensorflow.keras.models import Sequential
from keras.preprocessing import sequence
from tensorflow.keras.models import load_model
from gevent.pywsgi import WSGIServer
#from keras.models import load_model
tf.disable_v2_behavior()
x = tf.placeholder(shape=[None, 2], dtype=tf.float32)
from tensorflow.python.keras.backend import set_session
from tensorflow.python.keras.models import load_model
from tensorflow.compat.v1 import ConfigProto  
from tensorflow.compat.v1 import InteractiveSession  
config = ConfigProto()  
#config.gpu_options.allow_growth = True  
#session = InteractiveSession(config=config) 
tf_config = config
sess = tf.Session(config=tf_config)
graph = tf.get_default_graph()



IMAGE_FOLDER = os.path.join('static', 'img_pool')

app = Flask(__name__)

app.config['UPLOAD_FOLDER'] = IMAGE_FOLDER


tf.initialize_all_variables()

def init():
    global model,graph,sess
    # load the pre-trained Keras model
    set_session(sess)

    model = load_model('sentiment_analysis.h5',compile = False)
   
    
    tf.initialize_all_variables()
    #graph =tf.compat.v1.get_default_graph()
    graph=tf.get_default_graph()
    tf.initialize_all_variables()

#########################Code for Sentiment Analysis
@app.route('/', methods=['GET', 'POST'])
def home():
    return render_template("home.html")
  

@app.route('/sentiment_analysis_prediction', methods = ['POST', "GET"])
def sent_anly_prediction():
    
    if request.method=='POST':
        
        text = request.form['text']
        Sentiment = ''
        max_review_length = 500
        word_to_id = imdb.get_word_index()

        
        strip_special_chars = re.compile("[^A-Za-z0-9 ]+")
        text = text.lower().replace("<br />", " ")
        text=re.sub(strip_special_chars, "", text.lower())

        words = text.split() #split string into a list
        x_test = [[word_to_id[word] if (word in word_to_id and word_to_id[word]<=20000) else 0 for word in words]]
        x_test = sequence.pad_sequences(x_test, maxlen=500) # Should be same which you used for training data
        vector = np.array([x_test.flatten()])
        with graph.as_default():
            set_session(sess)
            tf.initialize_all_variables()
            probability = model.predict(array([vector][0]))[0][0]
            class1 = model.predict_classes(array([vector][0]))[0][0]
        if class1 == 0:
            sentiment = 'Negative'
            img_filename = os.path.join(app.config['UPLOAD_FOLDER'], 'Sad_Emoji.png')
        if class1 == 1:
            sentiment = 'Positive'
            img_filename = os.path.join(app.config['UPLOAD_FOLDER'], 'Smiling_Emoji.png')

    return render_template('home.html', text=text, sentiment=sentiment, probability=probability, image=img_filename)

#########################Code for Sentiment Analysis

if __name__ == "__main__":
    init()
    app.run(debug=True)
